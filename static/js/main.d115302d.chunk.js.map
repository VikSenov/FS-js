{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","context","onChange","bind","newValue","console","log","className","mode","theme","splits","value","name","editorProps","$blockScrolling","fontSize","width","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAUqBA,G,sFAEnB,WAAYC,EAAOC,GAAU,IAAD,8BAC1B,cAAMD,EAAOC,IAERC,SAAW,EAAKA,SAASC,KAAd,gBAHU,E,qDAMnBC,GACPC,QAAQC,IAAI,SAAUF,K,+BAItB,OACI,sBAAKG,UAAU,eAAf,UACE,cAAC,QAAD,CACIC,KAAK,OACLC,MAAM,WACNC,OAAQ,EACRC,MAAO,CAAC,mBACRC,KAAK,aACLC,YAAa,CAACC,iBAAiB,GAC/BC,SAAS,OACTC,MAAM,kBAEV,cAAC,QAAD,CACIR,KAAK,MACLC,MAAM,WACNC,OAAQ,EACRC,MAAO,CAAC,kBACRC,KAAK,YACLC,YAAa,CAACC,iBAAiB,GAC/BE,MAAM,kBAER,cAAC,QAAD,CACIR,KAAK,aACLC,MAAM,SACNC,OAAQ,EACRC,MAAO,CAAC,iBACRC,KAAK,WACLC,YAAa,CAACC,iBAAiB,GAC/BE,MAAM,yB,GAzCWC,IAAMC,YCExBC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d115302d.chunk.js","sourcesContent":["import React from 'react';\n// import brace from 'brace';\nimport {split as SplitEditor} from 'react-ace';\nimport 'brace/mode/html';\nimport 'brace/mode/css';\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\nimport 'brace/theme/terminal';\nimport 'brace/theme/kuroir';\n\nexport default class App extends React.Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(newValue) {\n    console.log('change', newValue);\n  }\n\n  render() {\n    return (\n        <div className='code-editors'>\n          <SplitEditor\n              mode=\"html\"\n              theme=\"tomorrow\"\n              splits={1}\n              value={['write html here']}\n              name=\"html-block\"\n              editorProps={{$blockScrolling: true}}\n              fontSize='19px'\n              width='calc(100vw/3)'\n          />\n          <SplitEditor\n              mode=\"css\"\n              theme=\"terminal\"\n              splits={1}\n              value={['write css here']}\n              name=\"css-block\"\n              editorProps={{$blockScrolling: true}}\n              width='calc(100vw/3)'\n          />\n            <SplitEditor\n                mode=\"javascript\"\n                theme=\"kuroir\"\n                splits={1}\n                value={['write js here']}\n                name=\"js-block\"\n                editorProps={{$blockScrolling: true}}\n                width='calc(100vw/3)'\n            />\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}